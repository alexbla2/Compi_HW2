%{
#include <stdio.h>
#include <string.h>
#include "tokens.h"

void showToken(char* );
int oct2int(char* oct, int len);
int hex2int(char* oct, int len);
%}

%option yylineno
%option noyywrap

digit ([0-9])
letter ([a-zA-Z])
alphaNum ([0-9a-zA-Z])
whitespace ([\t\n ])
newline 	(\r\n|\r|\n)
hexdig 		([0-9a-fA-F])
octdig 		([0-7])

%x string escape smpstring

%%


"---" 	return STARTSTRUCT;//showToken("STARTSTRUCT");
"..." 	return ENDSTRUCT;//showToken("ENDSTRUCT");
"[" 	return LLIST;//showToken("LLIST");
"]"	    return RLIST;//showToken("RLIST");
"{" 	return LDICT;//showToken("LDICT");
"}"	    return RDICT;//showToken("RDICT");
":" 	return KEY;//showToken("KEY");
"?"	    return COMPLEXKEY;//showToken("COMPLEXKEY");
"-"	    return ITEM;//showToken("ITEM");
","	    return COMMA;//showToken("COMMA");
"!!"{letter}+			return TYPE;//showToken("TYPE");

\#.* //showToken("COMMENT");
true			return TRUE;//showToken("TRUE");
false			return FALSE;//showToken("FALSE");
("+"|"-")?{digit}+|0x{hexdig}*|0o{octdig}*	return INTEGER;//showToken("INTEGER");
(("+"|"-")?{digit}*"."{digit}*)|(("+"|"-")?{digit}*"."{digit}*e("+"|"-"){digit}+)|".inf"|".NaN" 	return REAL;//showToken("REAL");

\' BEGIN(smpstring); yymore();
<smpstring>[^']* yymore();
<smpstring>\' return STRING;//showToken("STRING");BEGIN(0);
<smpstring><<EOF>> printf("Error unclosed string\n");exit(0);

{letter}+{alphaNum}* 	return VAL;//showToken("VAL");
"&"{letter}+	return DECLARATION;//showToken("DECLARATION");
"*"{letter}+	return DEREFERENCE;//showToken("DEREFERENCE");

\" BEGIN(string);yymore();
<string>\\ BEGIN(escape);yymore();
<escape>\\|\"|a|b|e|f|n|r|t|v|0|x{hexdig}{hexdig} BEGIN(string);yymore();
<escape>. printf("Error undefined escape sequence %c\n",yytext[yyleng-1]);exit(0);
<string>\" return STRING;//showToken("STRING");BEGIN(0);
<string>{newline} yymore();
<string>{whitespace} yymore();
<string>[[:print:]] yymore();
<string><<EOF>> printf("Error unclosed string\n");exit(0);

<<EOF>> return EOF;//showToken("EOF"); exit(0);
{newline}|{whitespace}	;
.	printf("Error %s\n", yytext); exit(0);
%%


int oct2int(char* oct, int len){
	int i=len-1 , temp, num = 0, factor = 1;
	for(; i>1 ; i--){
		temp = oct[i] - 48;
		temp *= factor;
		num += temp;
		factor *= 8;
	}
	return num;
}

int hex2int(char* oct, int len){

	int temp, num = 0, factor = 1, i=len-1;
	for( ; i>1 ; i--){
	//check if dig or letter
		if(( 'a' <= oct[i] ) && ( oct[i] <= 'f' ))
			temp = oct[i] - 87;
		else if(( 'A' <= oct[i] ) && ( oct[i] <= 'F' ))
			temp = oct[i] - 55;
			else
			temp = oct[i] - 48;
		temp *= factor;
		num += temp;
		factor *= 16;
	}
	return num;
}


void showToken(char* str){
	
	if( strcmp(str ,"COMMENT") == 0 ){ //comment handler - adds \0 to the end
		if(yytext[yyleng - 2] == '\r' ){
				yytext[yyleng - 2] = '\0';
		}else if(yytext[yyleng - 1] == '\n' || yytext[yyleng - 1] == '\r'){
			yytext[yyleng - 1] = '\0';
		}
	}
	

	else if( strcmp(str ,"INTEGER") == 0 ){	//integer handler
		if(yytext[0] == '+' || (yytext[0] == '-' && yytext[1] == '0'))
				yytext += 1;
				
		else if(yytext[0] == '0' && yytext[1] == 'x'){//hex2int
			printf("%d %s %d\n", yylineno, str, hex2int(yytext,yyleng));
			return;
		}
		
		else if(yytext[0] == '0' && yytext[1] == 'o'){//oct2int
			printf("%d %s %d\n", yylineno, str, oct2int(yytext,yyleng));
			return;
		}
		
		int offset=0, i=0;
		while(yytext[i++] == '0'){
			offset++;
			if(yytext[i] == '\0')
				offset--;
		}
		
		yytext += offset;
	}
        
	else if( strcmp(str ,"STRING") == 0 ){	////string handler
			if(yytext[0] == '\''){   		//string ' stype
				yytext[yyleng - 1] = '\0';
				yytext++;
			}else if(yytext[0] == '"'){   //string " stype
				char* buff=(char*)malloc(yyleng*(sizeof(*buff)+1));
				int i=0, j=0;
				for( ; i < yyleng-1 ; i++){
				
					if( i+1 < yyleng-1 ){
						if( yytext[i] == '\r' && yytext[i+1] == '\n' ){
							buff[j++] = ' '; //space
							i++;
							continue;
						}	
					}
					if( yytext[i] == '\n' || yytext[i] == '\r' ){
						buff[j++] = ' '; //space
						continue;
					}
					
					if(yytext[i] != '\\' ){
						buff[j++] = yytext[i];
					}else{
						if(yytext[i+1] == '\\'){
							buff[j++] = 0x5c;
							i++;
						}else if(yytext[i+1] == '\"'){
							buff[j++] = 0x22;
							i++;
						}else if(yytext[i+1] == 'a'){
							buff[j++] = '\a';
							i++;
						}else if(yytext[i+1] == 'b'){
							buff[j++] = '\b';
							i++;
						}else if(yytext[i+1] == 'e'){
							buff[j++] = '\e';
							i++;
						}else if(yytext[i+1] == 'f'){
							buff[j++] = '\f';
							i++;
						}else if(yytext[i+1] == 'n'){
							buff[j++] = '\n';
							i++;
						}else if(yytext[i+1] == 'r'){
							buff[j++] = '\r';
							i++;
						}else if(yytext[i+1] == 't'){
							buff[j++] = '\t';
							i++;
						}else if(yytext[i+1] == 'v'){
							buff[j++] = '\v';
							i++;
						}else if(yytext[i+1] == '0'){
							buff[j++] = '\0';
							break;
						}else if(yytext[i+1] == 'x'){
							char convert[4] = {'0' ,'x', yytext[i+2], yytext[i+3]};
							int decval = hex2int(convert, 4);
							if(decval == 0)
								break;
							buff[j++] = decval;
							i += 3;
						}
					}
				}
			buff[j] = '\0';
			printf("%d %s %s\n", yylineno, str, buff+1);
			free(buff);
			return;
		}
	}
	printf("%d %s %s\n", yylineno, str, yytext);
}

